@page "/stashtabs"
@using MediatR
@inject IMediator Mediator

<h3>Stash Tabs</h3>

<EditForm Model="@_request" OnValidSubmit="GetStashes" class="col-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="accountName">Account Name</label>
        <InputText class="form-control" id="accountName" @bind-Value="_request.AccountName"></InputText>
    </div>

    <div class="form-group">
        <label for="sessionId">PoE Session ID</label>
        <InputText class="form-control" id="sessionId" @bind-Value="_request.PoeSessionId"></InputText>
    </div>

    @if (LoadingStashes)
    {
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Getting Stashes...
        </button>
    }
    else
    {
        <button class="btn btn-primary" type="submit">Get Stashes</button>
    }
</EditForm>

@if (StashTabsResponse != null)
{
    @foreach (var tab in StashTabsResponse.Tabs)
    {
        <p>@tab.Name</p>
    }
}

@code {
    private bool LoadingStashes { get; set; }

    private GetStashTabs.Response StashTabsResponse { get; set; }

    private readonly GetStashTabs.Request _request = new GetStashTabs.Request();

    async void GetStashes()
    {
        LoadingStashes = true;

        try
        {
            StashTabsResponse = await Mediator.Send(_request);
        }
        catch
        {
            LoadingStashes = false;
        }

        LoadingStashes = false;
        StateHasChanged();
    }

}